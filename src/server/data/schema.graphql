schema {
  query: Root
  mutation: Mutation
}

input AddEventCommentInput {
  text: String!
  author: String!
  eventId: String!
  clientMutationId: String
}

type AddEventCommentPayload {
  event: EventType
  clientMutationId: String
}

input AddEventInput {
  name: String!
  startDate: String!
  endDate: String!
  description: String
  reservedItems: [String]
  userId: String!
  clientMutationId: String
}

type AddEventPayload {
  viewer: Viewer
  cart: CartType
  eventEdge: EventTypeEdge
  clientMutationId: String
}

input AddItemCommentInput {
  text: String!
  author: String!
  itemId: String!
  clientMutationId: String
}

type AddItemCommentPayload {
  item: ItemType
  clientMutationId: String
}

input AddItemInCartInput {
  viewerId: Int!
  itemReference: String!
  clientMutationId: String
}

type AddItemInCartPayload {
  viewer: Viewer
  cart: CartType
  clientMutationId: String
}

input AddItemInput {
  modelName: String!
  severity: String!
  domains: [String]
  subCategories: [String]
  comments: [String]
  author: String
  clientMutationId: String
}

type AddItemPayload {
  viewer: Viewer
  itemEdge: ItemTypeEdge
  clientMutationId: String
}

input AddModelInput {
  brandName: String!
  name: String!
  clientMutationId: String
}

type AddModelPayload {
  viewer: Viewer
  modelEdge: ModelTypeEdge
  clientMutationId: String
}

type BrandType implements Node {
  # The ID of an object
  id: ID!
  name: String
  description: String
}

# It display item selected in a cart
type CartType implements Node {
  # The ID of an object
  id: ID!
  count: Int
  selectedItems: [ItemType]
}

type CategoryType implements Node {
  # The ID of an object
  id: ID!
  name: String
  description: String
}

type DomainType implements Node {
  # The ID of an object
  id: ID!
  name: String
  description: String
}

input EmptyCartInput {
  viewerId: String!
  clientMutationId: String
}

type EmptyCartPayload {
  viewer: Viewer
  cart: CartType
  clientMutationId: String
}

# A connection to a list of items.
type EventCommentsTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventCommentsTypeEdge]
}

# An edge in a connection.
type EventCommentsTypeEdge {
  # The item at the end of the edge
  node: ItemCommentType

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type EventItemsTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventItemsTypeEdge]
}

# An edge in a connection.
type EventItemsTypeEdge {
  # The item at the end of the edge
  node: ItemType

  # A cursor for use in pagination
  cursor: String!
}

# It represents an event
type EventType implements Node {
  # The ID of an object
  id: ID!
  name: String
  description: String
  startDate: String
  endDate: String
  comments(after: String, first: Int, before: String, last: Int): EventCommentsTypeConnection
  reservedItems(after: String, first: Int, before: String, last: Int): EventItemsTypeConnection
}

# A connection to a list of items.
type EventTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventTypeEdge]
}

# An edge in a connection.
type EventTypeEdge {
  # The item at the end of the edge
  node: EventType

  # A cursor for use in pagination
  cursor: String!
}

type ItemCommentType implements Node {
  # The ID of an object
  id: ID!
  text: String
  author: String
  createdAt: String
  updatedAt: String
}

# A connection to a list of items.
type ItemCommentTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ItemCommentTypeEdge]
}

# An edge in a connection.
type ItemCommentTypeEdge {
  # The item at the end of the edge
  node: ItemCommentType

  # A cursor for use in pagination
  cursor: String!
}

type ItemType implements Node {
  # The ID of an object
  id: ID!
  model: ModelType
  reference: String
  state: StateType
  isInStock: Boolean
  comments(after: String, first: Int, before: String, last: Int): ItemCommentTypeConnection
}

# A connection to a list of items.
type ItemTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ItemTypeEdge]
}

# An edge in a connection.
type ItemTypeEdge {
  # The item at the end of the edge
  node: ItemType

  # A cursor for use in pagination
  cursor: String!
}

type ModelType implements Node {
  # The ID of an object
  id: ID!
  name: String
  description: String
  brand: BrandType
  domains: [DomainType]
  subCategories: [SubCategoryType]
}

# A connection to a list of items.
type ModelTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ModelTypeEdge]
}

# An edge in a connection.
type ModelTypeEdge {
  # The item at the end of the edge
  node: ModelType

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addModel(input: AddModelInput!): AddModelPayload
  addItem(input: AddItemInput!): AddItemPayload
  addItemComment(input: AddItemCommentInput!): AddItemCommentPayload
  addItemInCart(input: AddItemInCartInput!): AddItemInCartPayload
  removeItemFromCart(input: RemoveItemFromCartInput!): RemoveItemFromCartPayload
  emptyCart(input: EmptyCartInput!): EmptyCartPayload
  addEvent(input: AddEventInput!): AddEventPayload
  addEventComment(input: AddEventCommentInput!): AddEventCommentPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input RemoveItemFromCartInput {
  viewerId: Int!
  itemReference: String!
  clientMutationId: String
}

type RemoveItemFromCartPayload {
  viewer: Viewer
  cart: CartType
  clientMutationId: String
}

type Root {
  viewer(viewerId: Int!): Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type StateType implements Node {
  # The ID of an object
  id: ID!
  name: String
  severity: Int
}

type SubCategoryType implements Node {
  # The ID of an object
  id: ID!
  name: String
  description: String
  category: CategoryType
}

# It display the information related to an user
type UserType implements Node {
  # The ID of an object
  id: ID!
  firstName: String
  lastName: String
  login: String
  email: String
  enabled: Boolean
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  user: UserType
  items(severity: String, after: String, first: Int, before: String, last: Int): ItemTypeConnection
  item(reference: String!): ItemType
  events(date: String, after: String, first: Int, before: String, last: Int): EventTypeConnection
  event(a: String!): EventType
  brands: [BrandType]
  models(after: String, first: Int, before: String, last: Int): ModelTypeConnection
  domains: [DomainType]
  subCategories: [SubCategoryType]
  categories: [CategoryType]
  states: [StateType]
  countNextItemId(itemReference: String!): Int
  cart: CartType
}
